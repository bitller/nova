{"version":3,"sources":["base.js","products.js"],"names":[],"mappingsfile":"products.js","sourcesContent":["var Nova = {\n\n    /**\n     * Show sweet alert loader\n     *\n     * @param title\n     */\n    showLoader: function(title) {\n        swal({\n            title: title,\n            type: \"info\",\n            showConfirmButton: false\n        });\n    },\n\n    /**\n     * Hide sweet alert loader\n     */\n    hideLoader: function() {\n        swal.close();\n    },\n\n    /**\n     * Show success alert\n     *\n     * @param title\n     * @param message\n     */\n    showSuccessAlert: function(title, message) {\n        this.showAlert('success', title, message);\n    },\n\n    /**\n     * Show error alert\n     *\n     * @param title\n     * @param message\n     */\n    showErrorAlert: function(title, message) {\n        this.showAlert('error', title, message);\n    },\n\n    /**\n     * Show sweet alert box\n     *\n     * @param type\n     * @param title\n     * @param message\n     */\n    showAlert: function(type, title, message) {\n        swal({\n            title: title,\n            text: message,\n            type: type,\n            timer: 1750,\n            showConfirmButton: false\n        });\n    },\n\n    /**\n     * Get client page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getClientTranslation: function(attribute) {\n        return this.getTranslation('#client-trans', attribute);\n    },\n\n    /**\n     * Get product page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getProductTranslation: function(attribute) {\n        return this.getTranslation('#product-trans', attribute);\n    },\n\n    /**\n     * Get page translation\n     *\n     * @param pageSelector\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getTranslation: function(pageSelector, attribute) {\n        return $(pageSelector).attr(attribute);\n    },\n\n    /**\n     * Return application token\n     *\n     * @returns {*|jQuery}\n     */\n    getToken: function() {\n        return $('#token').attr('content');\n    },\n\n    /**\n     * Return url used to get products data\n     *\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildProductsRequestUrl: function(rows_on_page, current_page) {\n        return this.buildPaginationRequestUrl('/products/get', rows_on_page, current_page);\n    },\n\n    /**\n     *\n     * Return url used to edit product name\n     *\n     * @param product_id\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildEditProductNameRequestUrl: function(product_id, rows_on_page, current_page) {\n        return '/products/' + product_id + '/edit-name';\n        //return this.buildPaginationRequestUrl('/products/' + product_id + '/edit-name', rows_on_page, current_page);\n    },\n\n    /**\n     * Return url for pagination with given route\n     *\n     * @param route\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildPaginationRequestUrl: function(route, rows_on_page, current_page) {\n\n        if (rows_on_page < 1) {\n            current_page = current_page - 1;\n        }\n\n        return route + '?page=' + current_page;\n    }\n};","new Vue({\n\n    el: '#products',\n\n    /**\n     * Called when page is ready\n     */\n    ready: function() {\n        this.getProducts('/products/get');\n    },\n\n    methods: {\n\n        /**\n         * Get products data\n         *\n         * @param url\n         */\n        getProducts: function(url) {\n\n            Nova.showLoader(Nova.getProductTranslation('loading'));\n\n            this.$http.get(url, function(response) {\n                this.$set('products', response);\n                this.$set('loaded', true);\n                Nova.hideLoader();\n            });\n        },\n\n        /**\n         * Get products data if an url was given\n         *\n         * @param url\n         */\n        paginate: function(url) {\n            if (url) {\n                this.getProducts(url);\n            }\n        },\n\n        editProduct: function(product_id, product_name, current_page, rows_on_page) {\n\n            var thisInstance = this;\n\n            // Show product name prompt\n            swal({\n                title: Nova.getProductTranslation('edit-product-name'),\n                type: 'input',\n                inputValue: product_name,\n                showCancelButton: true,\n                closeOnConfirm: false,\n                animation: \"slide-from-top\",\n                confirmButtonText: Nova.getProductTranslation('edit-product-name'),\n                cancelButtonText: Nova.getProductTranslation('cancel')\n\n            }, function(inputValue) {\n\n                if (inputValue === false) {\n                    return false;\n                }\n\n                if (inputValue === \"\") {\n                    swal.showInputError('');\n                    return false;\n                }\n\n                // Show loader\n                Nova.showLoader(Nova.getProductTranslation('loading'));\n\n                // Build data\n                var url = Nova.buildEditProductNameRequestUrl(product_id, rows_on_page, current_page);\n                var data = {\n                    name: inputValue,\n                    _token: Nova.getToken()\n                };\n\n                // Make request\n                thisInstance.$http.post(url, data, function(response) {\n\n                    var getProductsUrl = Nova.buildProductsRequestUrl(rows_on_page, current_page);\n                    thisInstance.paginate(getProductsUrl);\n\n                    Nova.showSuccessAlert(response.title, response.message);\n                }).error(function(response) {\n                    Nova.showErrorAlert(response.title, response.message);\n                });\n\n            });\n\n        },\n\n        addProduct: function() {\n\n            // Show product code modal\n            swal({\n                title: Nova.getProductTranslation('add-product-title'),\n                type: 'input',\n                inputPlaceholder: Nova.getProductTranslation('product-name'),\n                showCancelButton: true,\n                closeOnConfirm: false,\n                animation: 'slide-from-top',\n                confirmButtonText: '',\n                cancelButtonText: ''\n            });\n\n            // Ask for product code\n\n            // Do request and show errors or success message if all is ok\n\n        }\n\n    }\n\n});"],"sourceRoot":"/source/"}