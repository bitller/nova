{"version":3,"sources":["bills.js"],"names":[],"mappingsfile":"bills.js","sourcesContent":["new Vue({\n    el: '#bills',\n\n    data: {\n        rows: 0\n    },\n\n    ready: function() {\n        this.getBills('/bills/get');\n    },\n\n    methods: {\n\n        deleteBill: function(bill_id, current_page, rows_on_page, loading) {\n\n            // Show loader\n            swal({\n                title: loading,\n                type: \"info\",\n                showConfirmButton: false\n            });\n\n            // Build request url and make request\n            var url = '/bills/'+bill_id+'/delete';\n            this.$http.get(url).success(function(response) {\n\n                // Build url for bills request\n                var billUrl = this.buildBillUrl(rows_on_page, current_page);\n\n                this.$http.get(billUrl).success(function(data) {\n                    swal({\n                        title: response.title,\n                        text: response.message,\n                        type: \"success\",\n                        timer: 1750,\n                        showConfirmButton: false\n                    });\n\n                    this.$set('bills', data);\n                });\n\n            }).error(function(response) {\n                //\n            });\n\n        },\n\n        createBill: function(title, placeholder, empty_input_error, message, loading, success) {\n\n            var before = this;\n\n            // Show prompt\n            swal({\n                    title: title,\n                    type: \"input\",\n                    showCancelButton: true,\n                    closeOnConfirm: false,\n                    animation: \"slide-from-top\",\n                    inputPlaceholder: placeholder\n                },\n                function(inputValue) {\n                    if (inputValue === false) return false;\n\n                    if (inputValue === \"\") {\n                        swal.showInputError(empty_input_error);\n                        return false\n                    }\n\n                    swal({\n                        title: loading,\n                        type: \"info\",\n                        showConfirmButton: false\n                    });\n\n                    before.$http.post('/bills/create', {client:inputValue, _token:$('#token').attr('content')}).success(function() {\n                        this.paginate('/bills/get');\n                        swal({\n                            title: success,\n                            text: message,\n                            type: \"success\",\n                            timer: 1750,\n                            showConfirmButton: false\n                        });\n                    });\n            });\n\n        },\n\n        /**\n         * This method is called by pagination links\n         *\n         * @param page_url\n         */\n        paginate: function(page_url) {\n            if (page_url) {\n                this.getBills(page_url);\n            }\n        },\n\n        /**\n         * Make ajax request to get bills\n         *\n         * @param url\n         */\n        getBills: function(url) {\n\n            this.$set('loaded', false);\n\n            this.$http.get(url).success(function(data) {\n                this.$set('bills', data);\n                this.$set('loaded', true);\n            });\n        },\n\n        /**\n         * Return url to paginate bills\n         *\n         * @param rows_on_page\n         * @param current_page\n         * @returns {string}\n         */\n        buildBillUrl: function(rows_on_page, current_page) {\n\n            if (rows_on_page < 1) {\n                current_page = current_page - 1;\n            }\n\n            return '/bills/get?page=' + current_page;\n        }\n\n    }\n});"],"sourceRoot":"/source/"}