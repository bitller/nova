{"version":3,"sources":["base.js","bills.js"],"names":[],"mappingsvfile":"bills.js","sourcesContent":["var Nova = {\n\n    /**\n     * Show sweet alert loader\n     *\n     * @param title\n     */\n    showLoader: function(title) {\n        swal({\n            title: title,\n            type: \"info\",\n            showConfirmButton: false\n        });\n    },\n\n    /**\n     * Hide sweet alert loader\n     */\n    hideLoader: function() {\n        swal.close();\n    },\n\n    /**\n     * Show success alert\n     *\n     * @param title\n     * @param message\n     */\n    showSuccessAlert: function(title, message) {\n        this.showAlert('success', title, message);\n    },\n\n    /**\n     * Show general error alert\n     */\n    showGeneralErrorAlert: function() {\n        this.showErrorAlert(this.getCommonTranslation('fail'), this.getCommonTranslation('general-error'));\n    },\n\n    /**\n     * Show error alert\n     *\n     * @param title\n     * @param message\n     */\n    showErrorAlert: function(title, message) {\n        this.showAlert('error', title, message);\n    },\n\n    /**\n     * Show sweet alert box\n     *\n     * @param type\n     * @param title\n     * @param message\n     */\n    showAlert: function(type, title, message) {\n        swal({\n            title: title,\n            text: message,\n            type: type,\n            timer: 1750,\n            showConfirmButton: false\n        });\n    },\n\n    /**\n     * Get common translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getCommonTranslation: function(attribute) {\n        return this.getTranslation('#common-trans', attribute);\n    },\n\n    /**\n     * Get client page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getClientTranslation: function(attribute) {\n        return this.getTranslation('#client-trans', attribute);\n    },\n\n    /**\n     * Get product page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getProductTranslation: function(attribute) {\n        return this.getTranslation('#product-trans', attribute);\n    },\n\n    /**\n     * Get my products page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getMyProductTranslation: function(attribute) {\n        return this.getTranslation('#my-products-trans', attribute);\n    },\n\n    /**\n     * Get page translation\n     *\n     * @param pageSelector\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getTranslation: function(pageSelector, attribute) {\n        return $(pageSelector).attr(attribute);\n    },\n\n    /**\n     * Return application token\n     *\n     * @returns {*|jQuery}\n     */\n    getToken: function() {\n        return $('#token').attr('content');\n    },\n\n    /**\n     * Return url used to get products data\n     *\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildProductsRequestUrl: function(rows_on_page, current_page) {\n        return this.buildPaginationRequestUrl('/products/get', rows_on_page, current_page);\n    },\n\n    /**\n     *\n     * Return url used to edit product name\n     *\n     * @param product_id\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildEditProductNameRequestUrl: function(product_id, rows_on_page, current_page) {\n        return '/products/' + product_id + '/edit-name';\n        //return this.buildPaginationRequestUrl('/products/' + product_id + '/edit-name', rows_on_page, current_page);\n    },\n\n    /**\n     * Return url for pagination with given route\n     *\n     * @param route\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildPaginationRequestUrl: function(route, rows_on_page, current_page) {\n\n        if (rows_on_page < 1) {\n            current_page = current_page - 1;\n        }\n\n        return route + '?page=' + current_page;\n    }\n};","new Vue({\n    el: '#bills',\n\n    data: {\n        rows: 0\n    },\n\n    ready: function() {\n        this.getBills('/bills/get');\n    },\n\n    methods: {\n\n        /**\n         * Make request to delete bill.\n         *\n         * @param bill_id\n         * @param current_page\n         * @param rows_on_page\n         * @param loading\n         */\n        deleteBill: function(bill_id, current_page, rows_on_page, loading) {\n\n            var thisInstance = this;\n\n            Alert.confirmDeleteBill(function() {\n\n                Alert.loader();\n\n                // Make request to delete bill\n                thisInstance.$http.get(UrlBuilder.deleteBill(bill_id)).success(function(response) {\n\n                    // Make request to get bills\n                    thisInstance.$http.get(UrlBuilder.getBill(rows_on_page, current_page)).success(function(data) {\n                        Alert.success(response.title, response.message);\n                        this.$set('bills', data);\n                    });\n\n                }).error(function(response) {\n\n                    if (response.message) {\n                        Alert.error(response.title, response.message);\n                        return;\n                    }\n\n                    Alert.generalError();\n\n                });\n            });\n        },\n\n        createBill: function(title, placeholder, empty_input_error, message, loading, success) {\n\n            var before = this;\n\n            // Show prompt\n            swal({\n                    title: title,\n                    type: \"input\",\n                    showCancelButton: true,\n                    closeOnConfirm: false,\n                    animation: \"slide-from-top\",\n                    inputPlaceholder: placeholder\n                },\n                function(inputValue) {\n                    if (inputValue === false) return false;\n\n                    if (inputValue === \"\") {\n                        swal.showInputError(empty_input_error);\n                        return false\n                    }\n\n                    swal({\n                        title: loading,\n                        type: \"info\",\n                        showConfirmButton: false\n                    });\n\n                    before.$http.post('/bills/create', {client:inputValue, _token:$('#token').attr('content')}).success(function() {\n                        this.paginate('/bills/get');\n                        swal({\n                            title: success,\n                            text: message,\n                            type: \"success\",\n                            timer: 1750,\n                            showConfirmButton: false\n                        });\n                    });\n            });\n\n        },\n\n        /**\n         * This method is called by pagination links\n         *\n         * @param page_url\n         */\n        paginate: function(page_url) {\n            if (page_url) {\n                this.getBills(page_url);\n            }\n        },\n\n        /**\n         * Make ajax request to get bills\n         *\n         * @param url\n         */\n        getBills: function(url) {\n\n            this.$set('loaded', false);\n\n            swal({\n                title: Nova.getCommonTranslation('loading'),\n                type: \"info\",\n                showConfirmButton: false\n            });\n\n            this.$http.get(url).success(function(data) {\n                this.$set('bills', data);\n                this.$set('loaded', true);\n                swal.close();\n            });\n        },\n\n        /**\n         * Return url to paginate bills\n         *\n         * @param rows_on_page\n         * @param current_page\n         * @returns {string}\n         */\n        buildBillUrl: function(rows_on_page, current_page) {\n\n            if (rows_on_page < 1) {\n                current_page = current_page - 1;\n            }\n\n            return '/bills/get?page=' + current_page;\n        }\n\n    }\n});"],"sourceRoot":"/source/"}