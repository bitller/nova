{"version":3,"sources":["base.js","client.js"],"names":[],"mappingsvfile":"client.js","sourcesContent":["var Nova = {\n\n    /**\n     * Show sweet alert loader\n     *\n     * @param title\n     */\n    showLoader: function(title) {\n        swal({\n            title: title,\n            type: \"info\",\n            showConfirmButton: false\n        });\n    },\n\n    /**\n     * Hide sweet alert loader\n     */\n    hideLoader: function() {\n        swal.close();\n    },\n\n    /**\n     * Show success alert\n     *\n     * @param title\n     * @param message\n     */\n    showSuccessAlert: function(title, message) {\n        this.showAlert('success', title, message);\n    },\n\n    /**\n     * Show general error alert\n     */\n    showGeneralErrorAlert: function() {\n        this.showErrorAlert(this.getCommonTranslation('fail'), this.getCommonTranslation('general-error'));\n    },\n\n    /**\n     * Show error alert\n     *\n     * @param title\n     * @param message\n     */\n    showErrorAlert: function(title, message) {\n        this.showAlert('error', title, message);\n    },\n\n    /**\n     * Show sweet alert box\n     *\n     * @param type\n     * @param title\n     * @param message\n     */\n    showAlert: function(type, title, message) {\n        swal({\n            title: title,\n            text: message,\n            type: type,\n            timer: 1750,\n            showConfirmButton: false\n        });\n    },\n\n    /**\n     * Get common translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getCommonTranslation: function(attribute) {\n        return this.getTranslation('#common-trans', attribute);\n    },\n\n    /**\n     * Get client page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getClientTranslation: function(attribute) {\n        return this.getTranslation('#client-trans', attribute);\n    },\n\n    /**\n     * Get product page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getProductTranslation: function(attribute) {\n        return this.getTranslation('#product-trans', attribute);\n    },\n\n    /**\n     * Get my products page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getMyProductTranslation: function(attribute) {\n        return this.getTranslation('#my-products-trans', attribute);\n    },\n\n    /**\n     * Get page translation\n     *\n     * @param pageSelector\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getTranslation: function(pageSelector, attribute) {\n        return $(pageSelector).attr(attribute);\n    },\n\n    /**\n     * Return application token\n     *\n     * @returns {*|jQuery}\n     */\n    getToken: function() {\n        return $('#token').attr('content');\n    },\n\n    /**\n     * Return url used to get products data\n     *\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildProductsRequestUrl: function(rows_on_page, current_page) {\n        return this.buildPaginationRequestUrl('/products/get', rows_on_page, current_page);\n    },\n\n    /**\n     *\n     * Return url used to edit product name\n     *\n     * @param product_id\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildEditProductNameRequestUrl: function(product_id, rows_on_page, current_page) {\n        return '/products/' + product_id + '/edit-name';\n        //return this.buildPaginationRequestUrl('/products/' + product_id + '/edit-name', rows_on_page, current_page);\n    },\n\n    /**\n     * Return url for pagination with given route\n     *\n     * @param route\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildPaginationRequestUrl: function(route, rows_on_page, current_page) {\n\n        if (rows_on_page < 1) {\n            current_page = current_page - 1;\n        }\n\n        return route + '?page=' + current_page;\n    }\n};","new Vue({\n\n    el: \"#client\",\n\n    /**\n     * Called when page is loaded\n     */\n    ready: function() {\n        this.getPageData();\n    },\n\n    methods: {\n\n        /**\n         * Make ajax request to load initial page data\n         */\n        getPageData: function() {\n\n            Alert.loader();\n\n            var url = '/clients/' + Nova.getClientTranslation('client-id') + '/get';\n\n            // Make request to get page data\n            this.$http.get(url, function(response) {\n\n                // Update models\n                this.$set('name', response.data.name);\n                this.$set('email', response.data.email);\n                this.$set('phone_number', response.data.phone_number);\n                this.$set('oldName', this.$get('name'));\n                this.$set('oldPhone', this.$get('phone'));\n                this.$set('statistics', response.data.statistics);\n                this.$set('money_user_has_to_receive', response.data.money_user_has_to_receive);\n                this.$set('money_owed_due_passed_payment_term', response.data.money_owed_due_passed_payment_term);\n                this.$set('last_paid_bills', response.data.last_paid_bills);\n                this.$set('last_unpaid_bills', response.data.last_unpaid_bills);\n\n                this.$set('client', response.data);\n\n                // Hide loader\n                this.$set('loaded', true);\n                swal.close();\n            }).error(function(response) {\n\n                if (response.message) {\n                    Alert.error(response.title, response.message);\n                    window.location.replace(response.redirect_to);\n                    return;\n                }\n\n                Alert.generalError();\n            });\n        },\n\n        /**\n         * Allow user to edit clients name\n         */\n        editClientName: function() {\n\n            this.$set('loading', true);\n\n            // Build post data\n            var data = {\n                _token: Token.get(),\n                client_name: this.$get('client_name')\n            };\n\n            // Make post request\n            this.$http.post('/clients/' + $('#client').attr('client-id') + '/edit-name', data, function(response) {\n\n                // Update client name, stop loading, close modal and show success alert\n                this.$set('name', data.client_name);\n                $('#edit-client-name-modal').modal('hide');\n                this.$set('loading', false);\n                Alert.success(response.message);\n\n            }).error(function(response) {\n\n                // Handle error response\n                this.$set('loading', false);\n\n                // Set corresponded error\n                if (!response.message) {\n                    this.$set('error', Translation.common('general-error'));\n                    return;\n                }\n\n                this.$set('errors', response.errors);\n            });\n        },\n\n        /**\n         * Reset edit client email modal data.\n         */\n        resetEditClientEmailModal: function() {\n            this.$set('loading', false);\n            Reset.vueData(this, ['errors', 'error', 'client_email']);\n        },\n\n        /**\n         * Edit client email.\n         */\n        editClientEmail: function() {\n\n            this.$set('loading', true);\n\n            // Build post data\n            var data = {\n                _token: Token.get(),\n                client_email: this.$get('client_email')\n            };\n\n            // Make post request\n            this.$http.post('/clients/' + $('#client').attr('client-id') + '/edit-email', data, function(response) {\n\n                // Handle success response\n                this.$set('loading', false);\n                this.$set('email', data.client_email);\n                $('#edit-client-email-modal').modal('hide');\n                Alert.success(response.message);\n\n            }).error(function(response) {\n\n                this.$set('loading', false);\n\n                // Handle error response\n                if (!response.message) {\n                    this.$set('error', Translation.common('general-error'));\n                    return;\n                }\n\n                this.$set('errors', response.errors);\n            });\n\n        },\n\n        /**\n         * Reset edit client name modal data.\n         */\n        resetEditClientNameModal: function() {\n            this.$set('loading', false);\n            Reset.vueData(this, ['errors', 'error', 'client_name']);\n        },\n\n        /**\n         * Allow user to edit clients phone number\n         */\n        editClientPhoneNumber: function() {\n\n            this.$set('loading', true);\n\n            // Post data\n            var data = {\n                _token: Token.get(),\n                client_phone_number: this.$get('client_phone_number')\n            };\n\n            // Make post request\n            this.$http.post('/clients/' + $('#client').attr('client-id') + '/edit-phone', data, function(response) {\n\n                // Stop loading and set new phone number\n                this.$set('loading', false);\n                this.$set('phone_number', data.client_phone_number);\n\n                // Hide modal and show success alert\n                $('#edit-client-phone-number-modal').modal('hide');\n                Alert.success(response.message);\n\n            }).error(function(response) {\n\n                // Stop loading and set proper error message\n                this.$set('loading', false);\n\n                if (!response.message) {\n                    this.$set('error', Translation.common('general-error'));\n                    return;\n                }\n\n                this.$set('errors', response.errors);\n            });\n        },\n\n        /**\n         * Reset edit client phone number modal data.\n         */\n        resetEditClientPhoneNumberModal: function() {\n            this.$set('loading', false);\n            Reset.vueData(this, ['errors', 'error', 'client_phone_number'])\n        }\n    }\n});"],"sourceRoot":"/source/"}