{"version":3,"sources":["clients.js"],"names":[],"mappingsfile":"clients.js","sourcesContent":["new Vue({\n\n    el: '#clients',\n\n    /**\n     * Called when page is ready and paginate initial clients\n     */\n    ready: function() {\n        this.getClients('/clients/get');\n    },\n\n    methods: {\n\n        /**\n         * Delete client.\n         *\n         * @param client_id\n         * @param current_page\n         * @param rows_on_page\n         */\n        deleteClient: function(client_id, current_page, rows_on_page) {\n\n            var thisInstance = this;\n\n            Alert.confirmDeleteClient(function() {\n                thisInstance.$http.get('/clients/' + client_id + '/delete', function(response) {\n\n                    // Handle success response\n                    thisInstance.$http.get(this.buildGetClientsUrl(rows_on_page, current_page), function(response) {\n\n                        this.$set('clients', response);\n                        Alert.success(Translation.common('success'), Translation.clients('client-deleted'));\n\n                    }).error(function(response) {\n\n                        // Handle response error\n                        if (!response.message) {\n                            Alert.generalError();\n                            return;\n                        }\n\n                        Alert.error(response.title, response.message);\n                    })\n\n                }).error(function(response) {\n\n                    // Handle error response\n                    if (!response.message) {\n                        Alert.generalError();\n                        return;\n                    }\n\n                    Alert.error(resoponse.title, response.message);\n                });\n            });\n        },\n\n        /**\n         * Create a new client\n         */\n        createClient: function() {\n\n            // Build post data\n            var data = {\n                _token: Token.get(),\n                client_name: this.$get('client_name'),\n                client_email: this.$get('client_email'),\n                client_phone_number: this.$get('client_phone_number')\n            };\n\n            this.$set('loading', true);\n\n            this.$http.post('/clients/create', data, function(response) {\n\n                this.getClients('/clients/get', function() {\n                    this.$set('loading', false);\n                    $('#create-new-client-modal').modal('hide');\n                    Alert.success(response.message);\n                });\n\n            }).error(function(response) {\n\n                this.$set('loading', false);\n\n                if (!response.message) {\n                    Alert.generalError();\n                    return;\n                }\n\n                this.$set('errors', response.errors);\n            });\n        },\n\n        /**\n         * This method is used by pagination links\n         *\n         * @param page_url\n         */\n        paginate: function(page_url) {\n            if (page_url) {\n                this.getClients(page_url);\n            }\n        },\n\n        /**\n         * Make getClients request\n         *\n         * @param url\n         * @param callback\n         */\n        getClients: function(url, callback) {\n\n            // Show loader\n            if (typeof callback === 'undefined') {\n                swal({\n                    title: $('#clients').attr('loading'),\n                    type: \"info\",\n                    showConfirmButton: false\n                });\n            }\n\n            // Make request\n            this.$http.get(url).success(function(data) {\n                this.$set('loaded', true);\n                this.$set('clients', data);\n\n                if (typeof callback === 'undefined') {\n                    swal.close();\n                } else {\n                    callback();\n                }\n            });\n        },\n\n        /**\n         * Reset create client modal data.\n         */\n        resetCreateClientModal: function() {\n            this.$set('loading', false);\n            Reset.vueData(this, ['errors', 'error', 'client_name', 'client_phone_number', 'client_email'])\n        },\n\n        /**\n         * Return url used by getClients request\n         *\n         * @param rows_on_page\n         * @param current_page\n         * @returns {string}\n         */\n        buildGetClientsUrl: function(rows_on_page, current_page) {\n\n            if (rows_on_page < 1) {\n                current_page = current_page - 1;\n            }\n\n            return '/clients/get?page=' + current_page;\n        }\n    }\n});\n\n$(document).ready(function() {\n    $('[data-toggle=\"popover\"]').popover();\n});"],"sourceRoot":"/source/"}