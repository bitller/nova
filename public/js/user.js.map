{"version":3,"sources":["user.js"],"names":[],"mappingsfile":"user.js","sourcesContent":["new Vue({\n\n    /**\n     * Target element.\n     */\n    el: '#user',\n\n    ready: function() {\n        this.loadUser();\n        this.getUserBills();\n    },\n\n    methods: {\n\n        loadUser: function() {\n            this.$http.get('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/get-user-data', function(response) {\n                this.$set('user_email', response.user.email);\n                this.$set('email', response.user.email);\n                this.$set('active', response.user.active);\n            }).error(function(response) {\n                //\n            });\n        },\n\n        /**\n         * Get user bills.\n         */\n        getUserBills: function() {\n            this.$set('loading_user_bills', true);\n            this.$http.get('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/get', function(response) {\n                this.$set('loading_user_bills', false);\n                this.$set('bills', response);\n            }).error(function(response) {\n                if (response.message) {\n                    Alert.error(response.message);\n                    return;\n                }\n                Alert.generalError();\n            });\n        },\n\n        /**\n         * Get paid bills of given user.\n         */\n        getUserPaidBills: function() {\n\n            // Check if paid bills are already loaded to avoid non sense requests\n            if (this.$get('paid_bills')) {\n                return;\n            }\n\n            this.$set('loading_user_paid_bills', true);\n            this.$http.get('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/get-paid-bills', function(response) {\n                this.$set('loading_user_paid_bills', false);\n                this.$set('paid_bills', response);\n            }).error(function(response) {\n                //\n            });\n        },\n\n        /**\n         * Get clients of given user.\n         */\n        getUserClients: function() {\n\n            // Check if clients are already loaded to avoid useless requests\n            if (this.$get('clients')) {\n                return;\n            }\n\n            this.$set('loading_user_clients', true);\n            this.$http.get('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/get-clients', function(response) {\n\n                // Success response\n                this.$set('loading_user_clients', false);\n                this.$set('clients', response);\n\n            }).error(function(response) {\n\n                // Handle error response\n                if (response.message) {\n                    Alert.error(response.message);\n                    return;\n                }\n                Alert.generalError();\n            });\n        },\n\n        /**\n         * Get custom products of given user.\n         */\n        getUserCustomProducts: function() {\n\n            // Check if custom products are already loaded to avoid useless requests\n            if (this.$get('custom_products')) {\n                return;\n            }\n\n            this.$set('loading_user_custom_products', true);\n            this.$http.get('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/get-custom-products', function(response) {\n\n                // Success response\n                this.$set('loading_user_custom_products', false);\n                this.$set('custom_products', response);\n\n            }).error(function(response) {\n\n                // Handle error response\n                if (response.message) {\n                    Alert.error(response.message);\n                    return;\n                }\n                Alert.generalError();\n            });\n        },\n\n        /**\n         * Get actions of given user.\n         */\n        getUserActions: function() {\n\n            // Check if actions are already loaded to avoid useless requests\n            if (this.$get('actions')) {\n                return;\n            }\n\n            this.$set('loading_user_actions', true);\n            this.$http.get('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/get-actions', function(response) {\n\n                // Success response\n                this.$set('loading_user_actions', false);\n                this.$set('actions', response);\n\n            }).error(function(response) {\n\n                // Handle error response\n                if (response.message) {\n                    Alert.error(response.message);\n                    return;\n                }\n                Alert.generalError();\n            });\n        },\n\n        /**\n         * Delete user bill.\n         *\n         * @param billId\n         */\n        deleteUserBill: function(billId) {\n            var thisInstance = this;\n            Alert.confirmDelete(function() {\n\n                var postData = {\n                    _token: Token.get(),\n                    bill_id: billId\n                };\n\n                thisInstance.$http.post('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/delete-bill', postData, function(response) {\n                    this.getUserBills();\n                    this.$set('paid_bills', '');\n                    this.getUserPaidBills();\n                    Alert.success(response.title, response.message);\n                }).error(function(response) {\n                    if (response.message) {\n                        Alert.error(response.message);\n                        return;\n                    }\n                    Alert.generalError();\n                });\n\n            }, 'bla bla');\n        },\n\n        /**\n         * Make user bill paid.\n         *\n         * @param billId\n         */\n        makeUserBillPaid: function(billId) {\n            this.changeUserBillPaidStatus(billId);\n        },\n\n        /**\n         * Allow admin to make user bill unpaid.\n         *\n         * @param billId\n         */\n        makeUserBillUnpaid: function(billId) {\n            this.changeUserBillPaidStatus(billId, true);\n        },\n\n        /**\n         * Allow admin to change user bill paid status.\n         *\n         * @param billId\n         * @param makeUnpaid If present, bill will pe maked unpaid\n         */\n        changeUserBillPaidStatus: function(billId, makeUnpaid) {\n\n            var thisInstance = this;\n            var message = 'make paid';\n            var url = '/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/make-bill-';\n\n            // Decide which url to use\n            if (typeof makeUnpaid !== 'undefined') {\n                message = 'make unpaid';\n                url = url + 'unpaid';\n            } else {\n                url = url + 'paid'\n            }\n\n            // Ask for confirmation\n            Alert.confirmDelete(function() {\n\n                var data = {\n                    _token: Token.get(),\n                    bill_id: billId\n                };\n\n                thisInstance.$http.post(url, data, function(response) {\n\n                    // Success handler when bill will be marked unpaid\n                    if (typeof makeUnpaid !== 'undefined') {\n                        this.getUserBills();\n                        this.$set('paid_bills', '');\n                        this.getUserPaidBills();\n                        Alert.success(response.title, response.message);\n                        return;\n                    }\n\n                    // Success handler when bill will be marked as paid\n                    this.getUserBills();\n                    this.$set('paid_bills', '');\n                    Alert.success(response.title, response.message);\n\n                }).error(function(response) {\n\n                    // Error response handler, valid for both situations\n                    if (typeof response.message !== 'undefined') {\n                        Alert.error(response.message);\n                        return;\n                    }\n                    Alert.generalError();\n                });\n            }, message);\n        },\n\n        /**\n         * Delete user bills.\n         *\n         * @param onlyUnpaid If present, only unpaid bills will be deleted\n         * @param onlyPaid If preset, only paid bills will be deleted\n         */\n        deleteAllUserBills: function(onlyUnpaid, onlyPaid) {\n\n            var thisInstance = this;\n            var url = '/admin-center/users-manager/user/' + $('#user').attr('user-id');\n            var message = '';\n\n            // Determine which ulr to use\n            if (typeof onlyPaid === 'undefined' && typeof onlyUnpaid === 'undefined') {\n                // Url used to delete all bills\n                url = url + '/delete-all-bills';\n                message = 'bla bla';\n            } else if (typeof onlyPaid !== 'undefined') {\n                // Url used to delete only paid bills\n                url = url + '/delete-paid-bills';\n                message = 'bla';\n            } else {\n                // Url used to delete only unpaid bills\n                url = url + '/delete-unpaid-bills';\n                message = 'sasda';\n            }\n\n            // Ask for confirmation\n            Alert.confirmDelete(function() {\n\n                var data = {\n                    _token: Token.get()\n                };\n                // Post request\n                thisInstance.$http.post(url, data, function(response) {\n                    this.getUserBills();\n                    this.$set('paid_bills', '');\n                    this.getUserPaidBills();\n                    Alert.success(response.title, response.message);\n                }).error(function(response) {\n                    if (response.message) {\n                        Alert.error(response.message);\n                        return;\n                    }\n                    Alert.generalError();\n                });\n\n            }, message);\n        },\n\n        /**\n         * Allow admin to make user bills paid or unpaid.\n         *\n         * @param makeUnpaid If present, user bills are marked paid, else unpaid\n         */\n        changeUserBillsPaidStatus: function(makeUnpaid) {\n\n            var thisInstance = this;\n            var url = '/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/make-all-bills-';\n            var message;\n\n            if (typeof makeUnpaid !== 'undefined') {\n                // Url to make bills unpaid\n                url = url + 'unpaid';\n                message = 'make unpaid';\n            } else {\n                // Url to make bills paid\n                url = url + 'paid';\n                message = 'make paid';\n            }\n\n            Alert.confirmDelete(function() {\n\n                // Post data\n                var data = {\n                    _token: Token.get()\n                };\n\n                // Make post request\n                thisInstance.$http.post(url, data, function (response) {\n\n                    // Handle success response\n                    this.getUserBills();\n                    this.$set('paid_bills', '');\n                    this.getUserPaidBills();\n                    Alert.success(response.title, response.message);\n\n                }).error(function (response) {\n                    // Handle response error\n                    if (response.message) {\n                        Alert.error(response.message);\n                        return;\n                    }\n                    Alert.generalError();\n                });\n            }, message);\n        },\n\n        /**\n         * Delete user custom product.\n         *\n         * @param custom_product_id If present, only product with given id will be deleted\n         */\n        deleteUserCustomProducts: function(custom_product_id) {\n\n            var thisInstance = this;\n            var url = '/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/delete-custom-';\n            var message = 'delete user custom product?';\n\n            // Build post data\n            var data = {\n                _token: Token.get()\n            };\n\n            if (typeof custom_product_id === 'undefined') {\n                // Prepare to delete all user custom products\n                url = url + 'products';\n                message = 'delete all user custom products?';\n            } else {\n                url = url + 'product';\n                data.custom_product_id = custom_product_id;\n            }\n\n            // Ask for confirmation\n            Alert.confirmDelete(function() {\n                // Do post request\n                thisInstance.$http.post(url, data, function(response) {\n\n                    this.$set('custom_products', '');\n                    this.getUserCustomProducts();\n                    Alert.success(response.title, response.message);\n\n                }).error(function(response) {\n                    // Error response\n                    if (response.message) {\n                        Alert.error(response.message);\n                        return;\n                    }\n                    Alert.generalError();\n                });\n            }, message);\n        },\n\n        /**\n         * Disable user account.\n         */\n        disableUserAccount: function() {\n            this.changeAccountStatus();\n        },\n\n        /**\n         * Enable user account.\n         */\n        enableUserAccount: function() {\n            this.changeAccountStatus(true);\n        },\n\n        /**\n         * Enable or disable user account.\n         *\n         * @param enable\n         */\n        changeAccountStatus: function(enable) {\n\n            // Base request url\n            var url = '/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/';\n            var thisInstance = this;\n            var message = 'Enable account';\n\n            if (typeof enable === 'undefined') {\n                url = url + 'disable-account';\n                message = 'Disable account';\n            } else {\n                url = url + 'enable-account';\n            }\n\n            Alert.confirmDelete(function() {\n                var data = {\n                    _token: Token.get()\n                };\n\n                // Do post request\n                thisInstance.$http.post(url, data, function(response) {\n\n                    // Handle success response\n                    Alert.success(response.title, response.message);\n                    this.$set('active', response.active);\n\n                }).error(function(response) {\n\n                    // Handle error response\n                    if (response.message) {\n                        Alert.error(response.message);\n                        return;\n                    }\n                    Alert.generalError();\n                });\n            }, message);\n        },\n\n        /**\n         * Allow admin to delete user account.\n         */\n        deleteUserAccount: function() {\n\n            var thisInstance = this;\n\n            Alert.confirmDelete(function() {\n\n                var data = {\n                    _token: Token.get()\n                };\n\n                thisInstance.$http.post('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/delete-account', data, function(response) {\n\n                    // Success response\n                    window.location.replace('/admin-center/users-manager');\n\n                }).error(function(response) {\n\n                    // Handle error response\n                    if (response.message) {\n                        Alert.error(response.message);\n                        return;\n                    }\n                    Alert.generalError();\n                });\n\n            }, 'message goes here');\n        },\n\n        /**\n         * Edit user email.\n         */\n        editUserEmail: function() {\n\n            this.$set('error', '');\n            this.$set('loading', true);\n\n            var data = {\n                _token: Token.get(),\n                email: this.$get('email')\n            };\n\n            this.$http.post('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/edit-email', data, function(response) {\n                // Success response\n                this.$set('loading', false);\n                this.$set('user_email', response.email);\n                this.$set('email', response.email);\n                $('#edit-user-email-modal').modal('toggle');\n                Alert.success(response.title, response.message);\n            }).error(function(response) {\n                // Error response\n                this.$set('loading', false);\n                if (response.message) {\n                    this.$set('error', response.message);\n                    return;\n                }\n                this.$set('error', Translation.common('general-error'));\n            });\n        },\n\n        /**\n         * Reset edit user email modal.\n         */\n        resetEditUserEmailModal: function() {\n            this.$set('error', '');\n            this.$set('email', this.$get('user_email'));\n        },\n\n        /**\n         * Allow admin to change user password.\n         */\n        changeUserPassword: function() {\n\n            this.$set('error', '');\n            this.$set('loading', true);\n\n            var data = {\n                _token: Token.get(),\n                new_password: this.$get('new_password'),\n                new_password_confirmation: this.$get('confirm_new_password')\n            };\n\n            this.$http.post('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/change-password', data, function(response) {\n\n                // Success response\n                this.$set('loading', false);\n                $('#change-user-password-modal').modal('toggle');\n                Alert.success(response.title, response.message);\n\n            }).error(function(response) {\n\n                // Error response\n                this.$set('loading', false);\n                if (response.message) {\n                    this.$set('error', response.message);\n                    return;\n                }\n                this.$set('error', Translation.common('general-error'));\n            });\n        },\n\n        /**\n         * Allow admin to delete user client.\n         *\n         * @param clientId\n         */\n        deleteUserClient: function(clientId) {\n\n            var thisInstance = this;\n\n            Alert.confirmDelete(function() {\n                // Post data\n                var data = {\n                    _token: Token.get(),\n                    client_id: clientId\n                };\n\n                thisInstance.$http.post('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/delete-client', data, function(response) {\n\n                    // Success response\n                    this.$set('clients', '');\n                    this.getUserClients();\n                    Alert.success(response.title, response.message);\n\n                }).error(function(response) {\n                    // Handle error response\n                    if (response.message) {\n                        Alert.error(response.message);\n                        return;\n                    }\n                    Alert.generalError();\n                });\n\n            }, 'message');\n        },\n\n        /**\n         * Delete all user clients.\n         */\n        deleteAllUserClients: function() {\n\n            var thisInstance = this;\n\n            Alert.confirmDelete(function() {\n\n                var data = {\n                    _token: Token.get()\n                };\n\n                thisInstance.$http.post('/admin-center/users-manager/user/' + $('#user').attr('user-id') + '/delete-clients', data, function(response) {\n\n                    // Success response\n                    this.$set('clients', '');\n                    this.getUserClients();\n                    Alert.success(response.title, response.message);\n\n                }).error(function(response) {\n\n                    // Error response\n                    if (response.message) {\n                        Alert.error(response.message);\n                        return;\n                    }\n                    Alert.generalError();\n                });\n\n            }, 'delete all user clients');\n\n        },\n\n        /**\n         * Reset change user password modal.\n         */\n        resetChangeUserPasswordModal: function() {\n            this.$set('error', '');\n            this.$set('new_password', '');\n            this.$set('confirm_new_password', '');\n        }\n    }\n});"],"sourceRoot":"/source/"}