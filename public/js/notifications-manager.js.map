{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"notifications-manager.js","sourcesContent":["new Vue({\n\n    /**\n     * Target element.\n     */\n    el: '#notifications-manager',\n\n    /**\n     * Called on ready.\n     */\n    ready: function() {\n        this.getNotifications();\n    },\n\n    methods: {\n\n        getNotifications: function(all, callback) {\n\n            var url = '/admin-center/notifications/last';\n\n            // Check if should be used url that returns all notifications\n            if (typeof all !== 'undefined') {\n                url = '/admin-center/notifications/all';\n            }\n\n            if (typeof callback === 'undefined') {\n                this.$set('loading', true);\n                Alert.loader();\n            }\n\n            this.$http.get(url, function (response) {\n\n                this.$set('notifications', response.notifications);\n                this.$set('number_of_notifications', response.number_of_notifications);\n\n                if (typeof callback === 'undefined') {\n                    this.$set('loading', false);\n                    Alert.close();\n                    return;\n                }\n\n                callback();\n            }).error (function (response) {\n                //\n            });\n\n        },\n\n        /**\n         * View or hide all notifications.\n         */\n        viewAllNotifications: function() {\n\n            var thisInstance = this;\n\n            if (this.$get('all_notifications_are_displayed')) {\n\n                this.$set('show_all_notifications_button_loader', true);\n\n                this.getNotifications(undefined, function() {\n                    thisInstance.$set('show_all_notifications_button_loader', false);\n                    thisInstance.$set('all_notifications_are_displayed', false);\n                });\n\n                return;\n            }\n\n            if (!this.$get('all_notifications_are_displayed')) {\n\n                this.$set('show_all_notifications_button_loader', true);\n\n                this.getNotifications('all', function() {\n                    thisInstance.$set('show_all_notifications_button_loader', false);\n                    thisInstance.$set('all_notifications_are_displayed', true);\n                });\n\n                return;\n            }\n        },\n\n        /**\n         * Allow admin to create new notification.\n         */\n        createNewNotification: function() {\n\n            this.$set('loading_notifications_modal', true);\n            this.$set('error', false);\n            this.$set('errors', false);\n\n            // Build data used in post request\n            var postData = {\n                _token: Token.get(),\n                type: this.$get('type'),\n                title: this.$get('title'),\n                message: this.$get('message')\n            };\n\n            this.$http.post('/admin-center/notifications/new', postData, function (response) {\n\n                this.getNotifications(undefined, function() {\n                    this.$set('loading_notifications_modal', false);\n\n                    $('#create-new-notification-modal').modal('hide');\n                    Alert.success(response.title, response.message);\n                });\n\n            }).error(function (response) {\n\n                this.$set('loading_notifications_modal', false);\n\n                if (!response.message) {\n                    Alert.generalError();\n                    return false;\n                }\n\n                this.$set('errors', response.errors);\n            });\n        },\n\n        /**\n         * Allow admin to delete a notification.\n         *\n         * @param notification_id\n         */\n        deleteNotification: function(notification_id) {\n\n            Alert.loader();\n\n            var postData = {\n                _token: Token.get(),\n                notification_id: notification_id\n            };\n\n            this.$http.post('/admin-center/notifications/delete', postData, function (response) {\n\n                this.getNotifications(undefined, function() {\n                    Alert.success(response.title, response.message);\n                });\n\n            }).error(function (response) {\n                Alert.generalError();\n            });\n        },\n\n        /**\n         * Edit notification title.\n         *\n         */\n        editNotificationTitle: function() {\n\n            this.$set('loading_title_modal', true);\n\n            var postData = {\n                _token: Token.get(),\n                notification_id: this.$get('current_id'),\n                notification_title: this.$get('new_notification_title')\n            };\n\n            var thisInstance = this;\n\n            this.$http.post('/admin-center/notifications/edit-title', postData, function (response) {\n\n                this.getNotifications(undefined, function() {\n\n                    thisInstance.$set('loading_title_modal', false);\n                    thisInstance.$set('current_title', false);\n                    thisInstance.$set('current_id', false);\n                    thisInstance.$set('new_notification_title', false);\n\n                    $('#edit-notification-title-modal').modal('hide');\n                    Alert.success(response.title, response.message);\n                });\n\n            }).error(function (response) {\n\n                this.$set('loading_title_modal', false);\n\n                if (!response.message) {\n                    this.$set('error', Translation.common('general-error'));\n                    return;\n                }\n\n                this.$set('error', response.message);\n            });\n        },\n\n        /**\n         * Set given title as current title.\n         *\n         * @param current_title\n         * @param current_id\n         */\n        setCurrentTitle: function(current_title, current_id) {\n\n            // First reset modal\n            this.$set('error', false);\n            $('#new-notification-title').val('');\n\n            this.$set('current_id', current_id);\n            this.$set('current_title', current_title);\n        },\n\n        /**\n         * Edit notification message.\n         */\n        editNotificationMessage: function() {\n\n            this.$set('loading_message_modal', true);\n\n            var postData = {\n                _token: Token.get(),\n                notification_id: this.$get('current_id'),\n                notification_message: this.$get('new_notification_message')\n            };\n\n            var thisInstance = this;\n\n            this.$http.post('/admin-center/notifications/edit-message', postData, function (response) {\n\n                this.getNotifications(undefined, function() {\n\n                    thisInstance.$set('loading_message_modal', false);\n                    thisInstance.$set('current_id', false);\n                    thisInstance.$set('current_message', false);\n                    thisInstance.$set('new_notification_message', false);\n\n                    $('#edit-notification-message-modal').modal('hide');\n                    Alert.success(response.title, response.message);\n                });\n\n            }).error(function (response) {\n\n                this.$set('loading_message_modal', false);\n\n                if (!response.message) {\n                    this.$set('error', Translation.common('general-error'));\n                    return;\n                }\n\n                this.$set('error', response.message);\n            });\n        },\n\n        /**\n         * Set current message, id and reset modal.\n         *\n         * @param current_message\n         * @param current_id\n         */\n        setCurrentMessage: function(current_message, current_id) {\n\n            // Reset modal first\n            this.$set('error', false);\n            $('#new-notification-message').val('');\n\n            this.$set('current_id', current_id);\n            this.$set('current_message', current_message);\n        },\n\n        /**\n         * Return notification types.\n         */\n        getTypes: function() {\n\n            this.$set('loading_notification_types', true);\n            this.$set('errors', false);\n            this.$set('error', false);\n\n            $('#title').val('');\n            $('#message').val('');\n\n            var thisInstance = this;\n\n            this.$http.get('/admin-center/notifications/types', function (response) {\n\n                this.$set('types', response.notification_types);\n                this.$set('loading_notification_types', false);\n\n            }).error (function (response) {\n                //\n            });\n        },\n\n        /**\n         * Delete all notifications.\n         */\n        deleteAllNotifications: function() {\n\n            var thisInstance = this;\n\n            Alert.confirmDelete(function() {\n\n                Alert.loader();\n\n                var postData = {\n                    _token: Token.get()\n                };\n\n                thisInstance.$http.post('/admin-center/notifications/delete-all', postData, function (response) {\n\n                    this.getNotifications(undefined, function() {\n                        Alert.success(response.title, response.message);\n                    });\n\n                }).error(function (response) {\n                    Alert.generalError();\n                });\n\n            }, 'delet etext');\n        },\n\n        /**\n         * Set current id and get targeted users.\n         *\n         * @param notification_id\n         * @param notification_title\n         */\n        setCurrentId: function(notification_id, notification_title) {\n\n            this.$set('current_id', notification_id);\n            this.$set('current_title', notification_title);\n            this.$set('loading_targeted_users', true);\n\n            this.$http.get('/admin-center/notifications/targeted-users', function (response) {\n\n                this.$set('loading_targeted_users', false);\n                this.$set('targeted_users', response.targeted_users);\n\n            }).error (function (response) {\n\n                this.$set('loading_targeted_users', false);\n\n                if (!response.message) {\n                    this.$set('error', Translation.common('general-error'));\n                    return;\n                }\n\n                this.$set('error', response.message);\n            });\n        },\n\n        /**\n         * Allow to set targeted users.\n         */\n        addTargetedUsers: function() {\n\n            this.$set('loading_targeted_users_modal', true);\n            this.$set('error', false);\n\n            var postData = {\n                _token: Token.get(),\n                target_group: this.$get('target_users_group'),\n                notification_id: this.$get('current_id')\n            };\n\n            var thisInstance = this;\n\n            // Make post request\n            this.$http.post('/admin-center/notifications/set-targeted-users', postData, function (response) {\n\n                this.getNotifications(undefined, function() {\n                    thisInstance.$set('loading_targeted_users_modal', false);\n                    $('#add-targeted-users-modal').modal('hide');\n                    Alert.success(response.title, response.message);\n                });\n\n            }).error(function (response) {\n\n                thisInstance.$set('loading_targeted_users_modal', false);\n\n                if (!response.message) {\n                    thisInstance.$set('error', Translation.common('general-error'));\n                    return;\n                }\n\n                this.$set('error', response.message);\n            });\n        },\n    }\n});"],"sourceRoot":"/source/"}