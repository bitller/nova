{"version":3,"sources":["base.js","my-products.js"],"names":[],"mappingshKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"my-products.js","sourcesContent":["var Nova = {\n\n    /**\n     * Show sweet alert loader\n     *\n     * @param title\n     */\n    showLoader: function(title) {\n        swal({\n            title: title,\n            type: \"info\",\n            showConfirmButton: false\n        });\n    },\n\n    /**\n     * Hide sweet alert loader\n     */\n    hideLoader: function() {\n        swal.close();\n    },\n\n    /**\n     * Show success alert\n     *\n     * @param title\n     * @param message\n     */\n    showSuccessAlert: function(title, message) {\n        this.showAlert('success', title, message);\n    },\n\n    /**\n     * Show error alert\n     *\n     * @param title\n     * @param message\n     */\n    showErrorAlert: function(title, message) {\n        this.showAlert('error', title, message);\n    },\n\n    /**\n     * Show sweet alert box\n     *\n     * @param type\n     * @param title\n     * @param message\n     */\n    showAlert: function(type, title, message) {\n        swal({\n            title: title,\n            text: message,\n            type: type,\n            timer: 1750,\n            showConfirmButton: false\n        });\n    },\n\n    /**\n     * Get common translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getCommonTranslation: function(attribute) {\n        return this.getTranslation('#common-trans', attribute);\n    },\n\n    /**\n     * Get client page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getClientTranslation: function(attribute) {\n        return this.getTranslation('#client-trans', attribute);\n    },\n\n    /**\n     * Get product page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getProductTranslation: function(attribute) {\n        return this.getTranslation('#product-trans', attribute);\n    },\n\n    /**\n     * Get my products page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getMyProductTranslation: function(attribute) {\n        return this.getTranslation('#my-products-trans', attribute);\n    },\n\n    /**\n     * Get page translation\n     *\n     * @param pageSelector\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getTranslation: function(pageSelector, attribute) {\n        return $(pageSelector).attr(attribute);\n    },\n\n    /**\n     * Return application token\n     *\n     * @returns {*|jQuery}\n     */\n    getToken: function() {\n        return $('#token').attr('content');\n    },\n\n    /**\n     * Return url used to get products data\n     *\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildProductsRequestUrl: function(rows_on_page, current_page) {\n        return this.buildPaginationRequestUrl('/products/get', rows_on_page, current_page);\n    },\n\n    /**\n     *\n     * Return url used to edit product name\n     *\n     * @param product_id\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildEditProductNameRequestUrl: function(product_id, rows_on_page, current_page) {\n        return '/products/' + product_id + '/edit-name';\n        //return this.buildPaginationRequestUrl('/products/' + product_id + '/edit-name', rows_on_page, current_page);\n    },\n\n    /**\n     * Return url for pagination with given route\n     *\n     * @param route\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildPaginationRequestUrl: function(route, rows_on_page, current_page) {\n\n        if (rows_on_page < 1) {\n            current_page = current_page - 1;\n        }\n\n        return route + '?page=' + current_page;\n    }\n};","new Vue({\n\n    el: '#my-products',\n\n    ready: function() {\n        this.getMyProducts('/my-products/get');\n    },\n\n    methods: {\n\n        /**\n         * Get my products data\n         *\n         * @param url\n         */\n        getMyProducts: function(url) {\n\n            Nova.showLoader(Nova.getCommonTranslation('loading'));\n\n            this.$http.get(url, function(response) {\n                this.$set('myProducts', response);\n                this.$set('loaded', true);\n                Nova.hideLoader();\n            });\n\n        },\n\n        /**\n         * Get my products data if an url was given\n         *\n         * @param url\n         */\n        paginate: function(url) {\n            if (url) {\n                this.getMyProducts(url);\n            }\n        },\n\n        /**\n         * Delete user product\n         *\n         * @param product_id\n         * @param current_page\n         * @param rows_on_page\n         */\n        deleteMyProduct: function(product_id, current_page, rows_on_page) {\n\n            var thisInstance = this;\n\n            // Show confirmation\n            swal({\n                title: Nova.getMyProductTranslation('confirm'),\n                text: Nova.getMyProductTranslation('delete-warning'),\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#DD6B55\",\n                confirmButtonText: Nova.getMyProductTranslation('confirm-delete'),\n                cancelButtonText: Nova.getMyProductTranslation('cancel'),\n                closeOnConfirm: false\n            }, function() {\n\n                // Show loader\n                Nova.showLoader(Nova.getCommonTranslation('loading'));\n\n                // Build request url\n                var url = '/my-products/' + product_id + '/delete';\n                thisInstance.$http.get(url).success(function(response) {\n\n                    var paginationUrl = Nova.buildPaginationRequestUrl('/my-products/get', rows_on_page, current_page);\n                    this.paginate(paginationUrl);\n\n                }).error(function(response) {\n\n                    var error = response.title;\n                    var generalError = response.message;\n\n                    if (!generalError) {\n                        generalError = Nova.getCommonTranslation('general-error');\n                    }\n\n                    if (!error) {\n                        error = Nova.getCommonTranslation('fail');\n                    }\n\n                    Nova.showErrorAlert(error, generalError);\n\n                });\n\n            });\n\n        }\n\n    }\n\n});"],"sourceRoot":"/source/"}