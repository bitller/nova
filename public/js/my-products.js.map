{"version":3,"sources":["base.js","my-products.js"],"names":[],"mappingsvfile":"my-products.js","sourcesContent":["var Nova = {\n\n    /**\n     * Show sweet alert loader\n     *\n     * @param title\n     */\n    showLoader: function(title) {\n        swal({\n            title: title,\n            type: \"info\",\n            showConfirmButton: false\n        });\n    },\n\n    /**\n     * Hide sweet alert loader\n     */\n    hideLoader: function() {\n        swal.close();\n    },\n\n    /**\n     * Show success alert\n     *\n     * @param title\n     * @param message\n     */\n    showSuccessAlert: function(title, message) {\n        this.showAlert('success', title, message);\n    },\n\n    /**\n     * Show general error alert\n     */\n    showGeneralErrorAlert: function() {\n        this.showErrorAlert(this.getCommonTranslation('fail'), this.getCommonTranslation('general-error'));\n    },\n\n    /**\n     * Show error alert\n     *\n     * @param title\n     * @param message\n     */\n    showErrorAlert: function(title, message) {\n        this.showAlert('error', title, message);\n    },\n\n    /**\n     * Show sweet alert box\n     *\n     * @param type\n     * @param title\n     * @param message\n     */\n    showAlert: function(type, title, message) {\n        swal({\n            title: title,\n            text: message,\n            type: type,\n            timer: 1750,\n            showConfirmButton: false\n        });\n    },\n\n    /**\n     * Get common translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getCommonTranslation: function(attribute) {\n        return this.getTranslation('#common-trans', attribute);\n    },\n\n    /**\n     * Get client page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getClientTranslation: function(attribute) {\n        return this.getTranslation('#client-trans', attribute);\n    },\n\n    /**\n     * Get product page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getProductTranslation: function(attribute) {\n        return this.getTranslation('#product-trans', attribute);\n    },\n\n    /**\n     * Get my products page translation that match given attribute\n     *\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getMyProductTranslation: function(attribute) {\n        return this.getTranslation('#my-products-trans', attribute);\n    },\n\n    /**\n     * Get page translation\n     *\n     * @param pageSelector\n     * @param attribute\n     * @returns {*|jQuery}\n     */\n    getTranslation: function(pageSelector, attribute) {\n        return $(pageSelector).attr(attribute);\n    },\n\n    /**\n     * Return application token\n     *\n     * @returns {*|jQuery}\n     */\n    getToken: function() {\n        return $('#token').attr('content');\n    },\n\n    /**\n     * Return url used to get products data\n     *\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildProductsRequestUrl: function(rows_on_page, current_page) {\n        return this.buildPaginationRequestUrl('/products/get', rows_on_page, current_page);\n    },\n\n    /**\n     *\n     * Return url used to edit product name\n     *\n     * @param product_id\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildEditProductNameRequestUrl: function(product_id, rows_on_page, current_page) {\n        return '/products/' + product_id + '/edit-name';\n        //return this.buildPaginationRequestUrl('/products/' + product_id + '/edit-name', rows_on_page, current_page);\n    },\n\n    /**\n     * Return url for pagination with given route\n     *\n     * @param route\n     * @param rows_on_page\n     * @param current_page\n     * @returns {string}\n     */\n    buildPaginationRequestUrl: function(route, rows_on_page, current_page) {\n\n        if (rows_on_page < 1) {\n            current_page = current_page - 1;\n        }\n\n        return route + '?page=' + current_page;\n    }\n};","new Vue({\n\n    el: '#my-products',\n\n    ready: function() {\n        this.getMyProducts('/my-products/get');\n    },\n\n    methods: {\n\n        /**\n         * Get my products data.\n         *\n         * @param url\n         * @param callback\n         */\n        getMyProducts: function(url, callback) {\n\n            // Show loader only if a callback is not given\n            if (typeof callback === 'undefined') {\n                Alert.loader();\n            }\n\n            // Do request\n            this.$http.get(url, function(response) {\n\n                this.$set('myProducts', response);\n                this.$set('loaded', true);\n\n                // Call callback if is given\n                if (typeof callback !== 'undefined') {\n                    callback();\n                    return;\n                }\n\n                Alert.close();\n            });\n\n        },\n\n        /**\n         * Get my products data if an url was given\n         *\n         * @param url\n         */\n        paginate: function(url) {\n            if (url) {\n                this.getMyProducts(url);\n            }\n        },\n\n        /**\n         * Add product.\n         */\n        addProduct: function() {\n\n            // Reset errors\n            this.$set('error', '');\n            this.$set('errors', '');\n\n            var thisInstance = this;\n            this.$set('loading', true);\n\n            var postData = {\n                _token: Token.get(),\n                name: this.$get('name'),\n                code: this.$get('code')\n            };\n\n            this.$http.post('/my-products/add', postData, function(response) {\n\n                this.getMyProducts('/my-products/get', function() {\n\n                    thisInstance.$set('loading', false);\n\n                    // Reset modal\n                    thisInstance.resetAddProductModal();\n\n                    Alert.success(response.message);\n\n                    // Hide if is required\n                    if (!thisInstance.$get('add_another_product')) {\n                        $('#add-custom-product-modal').modal('hide');\n                    }\n                });\n\n            }).error(function(response) {\n\n                thisInstance.$set('loading', false);\n\n                if (!response.message) {\n                    this.$set('error', Translation.common('general-error'));\n                    return;\n                }\n\n                this.$set('errors', response.errors);\n\n            });\n        },\n\n        /**\n         * Toggle search products bar.\n         */\n        toggleSearch: function() {\n            $('.search-products').toggle();\n        },\n\n        /**\n         * Search user custom products.\n         */\n        search: function() {\n\n            var thisInstance = this;\n            \n            this.getMyProducts('/my-products/get/search?term=' + this.$get('search_term'), function() {\n\n                var searched = false;\n\n                if (thisInstance.$get('search_term')) {\n                    searched = true;\n                }\n\n                thisInstance.$set('searched', searched);\n                Alert.close();\n            });\n        },\n\n        resetSearch: function() {\n            Alert.loader();\n            var thisInstance = this;\n\n            this.paginate('/my-products/get', function() {\n                thisInstance.$set('search_term', '');\n                $('#search-products-input').val('');\n                Alert.close();\n            });\n        },\n\n        /**\n         * Reset add product modal.\n         */\n        resetAddProductModal: function() {\n\n            this.$set('name', '');\n            this.$set('code', '');\n\n            $('#product-code').val('');\n            $('#product-name').val('');\n            $('#product-code').focus();\n        },\n\n        /**\n         * Delete user product\n         *\n         * @param product_id\n         * @param current_page\n         * @param rows_on_page\n         */\n        deleteMyProduct: function(product_id, current_page, rows_on_page) {\n\n            var thisInstance = this;\n\n            Alert.confirmDeleteProductFromBill(function() {\n\n                // Do request\n                thisInstance.$http.get('/my-products/' + product_id + '/delete', function(response) {\n\n                    // Handle success response\n                    this.getMyProducts(Nova.buildPaginationRequestUrl('/my-products/get', rows_on_page, current_page), function() {\n                        Alert.success(response.title, response.message);\n                    });\n\n                }).error(function(response) {\n\n                    // Handle error response\n                    if (!response.message) {\n                        Alert.generalError();\n                        return;\n                    }\n\n                    Alert.error(response.title, response.message);\n                });\n\n            });\n        },\n\n        /**\n         * Return swal configuration object for add product popup\n         *\n         * @returns {{title: (*|jQuery), text: (*|jQuery), type: string, showCancelButton: boolean, closeOnConfirm: boolean, showLoaderOnConfirm: boolean, inputPlaceholder: (*|jQuery)}}\n         */\n        getAddProductSwalConfig: function() {\n            return {\n                title: Nova.getMyProductTranslation('add-product'),\n                text: Nova.getMyProductTranslation('add-product-description'),\n                type: \"input\",\n                showCancelButton: true,\n                closeOnConfirm: false,\n                showLoaderOnConfirm: true,\n                inputPlaceholder: Nova.getMyProductTranslation('code')\n            };\n        },\n\n        /**\n         * Return swal configuration object for add product popup\n         *\n         * @returns {{title: (*|jQuery), text: (*|jQuery), type: string, showCancelButton: boolean, closeOnConfirm: boolean, showLoaderOnConfirm: boolean, inputPlaceholder: (*|jQuery)}}\n         */\n        getAddProductNameSwalConfig: function() {\n            return {\n                title: Nova.getMyProductTranslation('add-product'),\n                text: Nova.getMyProductTranslation('add-product-description'),\n                type: \"input\",\n                showCancelButton: true,\n                closeOnConfirm: false,\n                showLoaderOnConfirm: true,\n                inputPlaceholder: Nova.getMyProductTranslation('name')\n            }\n        },\n\n        /**\n         * Check if given product code is valid\n         *\n         * @param code\n         * @returns {boolean}\n         */\n        isProductCodeValid: function(code) {\n\n            if (code === false) {\n                return false;\n            }\n\n            if (code === \"\") {\n                swal.showInputError(Nova.getMyProductTranslation('product-code-required'));\n                return false;\n            }\n\n            return true;\n        },\n\n        isProductNameValid: function(name) {\n\n            if (name === false) {\n                return false;\n            }\n\n            if (name === \"\") {\n                swal.showInputError(Nova.getMyProductTranslation('product-name-required'));\n                return false;\n            }\n\n            return true;\n\n        }\n\n    }\n\n});"],"sourceRoot":"/source/"}